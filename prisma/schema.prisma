generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role?
  organization  Organization?
  attendee      Attendee?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  ORGANIZER
  ATTENDEE
}

model Organization {
  // TODO: does it need its own id?
  id        String     @id @default(cuid())
  name      String     @unique
  // TODO: should multiple users be allowed to login to same organization account
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  events    Event[]
  quizes    Quiz[]
  questions Question[]
}

model Attendee {
  id             String      @id @default(cuid())
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  teams          Team[]      @relation(name: "TeamMember")
  adminOfTeams   Team[]      @relation(name: "TeamAdmin")
  captainOfTeams EventTeam[]
}

model Team {
  id         String      @id @default(cuid())
  name       String
  createdAt  DateTime    @default(now())
  members    Attendee[]  @relation(name: "TeamMember", references: [id])
  admin      Attendee    @relation(name: "TeamAdmin", fields: [adminId], references: [id])
  adminId    String
  eventTeams EventTeam[]
}

model EventTeam {
  // TODO: do i need id?
  id        String         @id @default(cuid())
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  event     Event          @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  captain   Attendee       @relation(fields: [captainId], references: [id])
  captainId String
  // TODO: check
  points    Int            @default(0)
  answers   EventAnswers[]

  // TODO: unique vs id
  @@unique([eventId, teamId])
}

model Event {
  id             String         @id @default(cuid())
  name           String
  owner          Organization   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
  startDate      DateTime
  duration       Int
  location       String
  price          Int
  teamCountLimit Int
  teams          EventTeam[]
  answers        EventAnswers[]
  createdAt      DateTime       @default(now())
}

model Quiz {
  id          String         @id @default(cuid())
  name        String
  description String
  owner       Organization   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  questions   QuizQuestion[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Question {
  id          String             @id @default(cuid())
  text        String
  image       String?
  audio       String?
  // TODO question type (for different modes)
  // TODO: owner
  owner       Organization?      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String?
  isGlobal    Boolean            @default(false)
  isActive    Boolean            @default(true)
  categories  QuestionCategory[]
  answer      QuestionAnswer[]
  quizQustion QuizQuestion[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model QuestionAnswer {
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  answer     Answer   @relation(fields: [answerId], references: [id])
  answerId   String

  // TODO: quiz
  @@unique([questionId])
}

model QuizQuestion {
  id           String         @id @default(cuid())
  quiz         Quiz           @relation(fields: [quizId], references: [id])
  quizId       String
  question     Question       @relation(fields: [questionId], references: [id])
  questionId   String
  // TODO: handle ordinals per round
  ordinal      Int
  eventAnswers EventAnswers[]

  // TODO: mode
  // TODO: dont allow duplicate ordinals
  @@unique([quizId, questionId])
  @@unique([quizId, ordinal])
}

model EventAnswers {
  event      Event        @relation(fields: [eventId], references: [id])
  eventId    String
  team       EventTeam    @relation(fields: [teamId], references: [id])
  teamId     String
  question   QuizQuestion @relation(fields: [questionId], references: [id])
  questionId String
  // TODO: maybe handle multiple answers on database level
  answer     String
  createdAt  DateTime     @default(now())
  // TODO: if we update status, it will mess up updated time which tracks when final answer was submitted
  updatedAt  DateTime     @updatedAt

  @@unique([teamId, questionId])
}

// TODO: do we want a seperate table for answers
// it will keep all the answers ever created even after their changes, so that it doesn't brake its usage on other questions
model Answer {
  id              String           @id @default(cuid())
  answer          String
  questionAnswers QuestionAnswer[]
}

model QuestionCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  description String     @db.Text
  questions   Question[]
}

// TODO
enum EventAnswerStatus {
  PENDING
  CORRECT
  INCORRECT
}
