generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role          @default(ATTENDEE)
  organization  Organization?
  attendee      Attendee?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  ORGANIZER
  ATTENDEE
}

model Organization {
  id     String  @id @default(cuid())
  name   String  @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  events Event[]
}

model Attendee {
  id             String      @id @default(cuid())
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  teams          Team[]      @relation(name: "TeamMember")
  adminOfTeams   Team[]      @relation(name: "TeamAdmin")
  captainOfTeams EventTeam[]
}

model Team {
  id         String      @id @default(cuid())
  name       String
  createdAt  DateTime    @default(now())
  members    Attendee[]  @relation(name: "TeamMember", references: [id])
  admin      Attendee    @relation(name: "TeamAdmin", fields: [adminId], references: [id])
  adminId    String
  eventTeams EventTeam[]
}

model EventTeam {
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  captain   Attendee @relation(fields: [captainId], references: [id])
  captainId String
}

model Event {
  id             String       @id @default(cuid())
  name           String
  owner          Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
  startDate      DateTime
  duration       Int
  location       String
  price          Int
  teamCountLimit Int
  teams          EventTeam[]
}
