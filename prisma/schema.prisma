generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role?

  // opposite relations
  accounts     Account[]
  sessions     Session[]
  organization Organization?
  attendee     Attendee?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  ORGANIZER
  ATTENDEE
}

model Organization {
  id     String @id @default(cuid())
  name   String @unique
  // TODO: should multiple users be allowed to login to same organization account?
  userId String @unique

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // opposite relations
  events    Event[]
  quizzes   Quiz[]
  questions Question[]
}

model Attendee {
  id     String @id @default(cuid())
  userId String @unique

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // opposite relations
  teams          Team[]      @relation(name: "TeamMember")
  adminOfTeams   Team[]      @relation(name: "TeamAdmin")
  captainOfTeams EventTeam[]
}

model Team {
  id          String   @id @default(cuid())
  name        String
  countryCode String
  adminId     String
  createdAt   DateTime @default(now())

  // relations
  admin Attendee @relation(name: "TeamAdmin", fields: [adminId], references: [id], onDelete: Restrict)

  // opposite relations
  members    Attendee[]  @relation(name: "TeamMember", references: [id])
  eventTeams EventTeam[]
}

model EventTeam {
  id        String   @id @default(cuid())
  teamId    String
  eventId   String
  captainId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  team    Team     @relation(fields: [teamId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  event   Event    @relation(fields: [eventId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  captain Attendee @relation(fields: [captainId], references: [id], onUpdate: NoAction, onDelete: Restrict)

  // opposite relations
  answers EventTeamAnswer[]

  @@unique([eventId, teamId])
}

model Event {
  id             String   @id @default(cuid())
  name           String
  banner         String?
  ownerId        String
  //! TODO: DISABLED ONLY FOR TESTING PURPOSES
  quizId         String?
  startDate      DateTime
  location       String
  price          Int
  teamCountLimit Int
  createdAt      DateTime @default(now())

  // relations
  owner Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  quiz  Quiz?        @relation(fields: [quizId], references: [id], onDelete: Restrict)

  // opposite relations
  teams EventTeam[]
}

model Quiz {
  id          String   @id @default(cuid())
  name        String
  description String
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  thumbnail   String?

  // relations
  owner Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // opposite relations
  questions QuizQuestion[]
  Event     Event[]
}

// when choosing existing question, if ANY INFO ic changed (any word in question, any answer, any answer added) - question is "forked" (but with no reference to the original - yet)
// both question and all of the answers are added to its tables as new records
model Question {
  id             String             @id @default(cuid())
  text           String
  image          String?
  audio          String?
  // TODO: set default question mode - single text question
  questionTypeId Int                @default(1)
  ownerId        String?
  isGlobal       Boolean            @default(false)
  isActive       Boolean            @default(true)
  categories     QuestionCategory[]
  answer         Answer[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  // relations
  owner        Organization? @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  questionType QuestionMode? @relation(fields: [questionTypeId], references: [id], onDelete: Restrict)

  // opposite relations
  quizQuestions QuizQuestion[]
}

model Answer {
  id         String @id @default(cuid())
  questionId String
  answer     String

  // relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuestionMode {
  id          Int    @id @default(autoincrement())
  name        String
  // mode rules are handled on the backend/frontend
  description String @db.Text

  // opposite relations
  questions Question[]
}

model QuestionScoringMode {
  id          Int    @id @default(autoincrement())
  name        String
  description String @db.Text

  // opposite relations
  questions QuizQuestion[]
}

model QuestionCategory {
  id          String @id @default(cuid())
  name        String @unique
  description String @db.Text

  // opposite relations
  questions Question[]
}

// question instance for a specific quiz
model QuizQuestion {
  id            String @id @default(cuid())
  quizId        String
  // onUpdate: No action is a workaround from https://github.com/prisma/prisma/issues/10758
  questionId    String
  ordinal       Int
  // we probably want to override original question mode (scoring)
  // ie. for modes such as "betting on answer" or "fastest correct answer"
  // maybe we have different mode tables - question mode on original question (single, photo, audio, multiple) & scoring mode on our instance
  scoringModeId Int    @default(1)

  // relations
  quiz        Quiz                 @relation(fields: [quizId], references: [id], onUpdate: NoAction, onDelete: Restrict)
  question    Question             @relation(fields: [questionId], references: [id], onUpdate: NoAction, onDelete: Restrict)
  scoringMode QuestionScoringMode? @relation(fields: [scoringModeId], references: [id], onDelete: Restrict)

  // opposite relations
  eventAnswers EventTeamAnswer[]

  @@unique([quizId, questionId])
  @@unique([quizId, ordinal])
}

model EventTeamAnswer {
  eventTeamId String
  questionId  String
  // save all answers in string, parse on backend (CSV?)
  answer      String?
  status      EventAnswerStatus @default(UNANSWERED)
  points      Int               @default(0)
  createdAt   DateTime          @default(now())
  // track time of submission
  submittedAt DateTime
  // will be updated when the status was updated (we dont want that to track submit time)
  updatedAt   DateTime          @updatedAt

  // relations
  eventTeam EventTeam    @relation(fields: [eventTeamId], references: [id], onUpdate: NoAction, onDelete: Restrict)
  question  QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Restrict)

  @@unique([eventTeamId, questionId])
}

enum EventAnswerStatus {
  UNANSWERED
  CORRECT
  INCORRECT
}
