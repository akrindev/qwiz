generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role?
  organization  Organization?
  attendee      Attendee?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  ORGANIZER
  ATTENDEE
}

model Organization {
  id        String     @id @default(cuid())
  name      String     @unique
  // TODO: should multiple users be allowed to login to same organization account
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  events    Event[]
  quizes    Quiz[]
  questions Question[]
}

model Attendee {
  id             String      @id @default(cuid())
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  teams          Team[]      @relation(name: "TeamMember")
  adminOfTeams   Team[]      @relation(name: "TeamAdmin")
  captainOfTeams EventTeam[]
}

model Team {
  id          String      @id @default(cuid())
  name        String
  countryCode String
  createdAt   DateTime    @default(now())
  members     Attendee[]  @relation(name: "TeamMember", references: [id])
  admin       Attendee    @relation(name: "TeamAdmin", fields: [adminId], references: [id])
  adminId     String
  eventTeams  EventTeam[]
}

model EventTeam {
  id        String            @id @default(cuid())
  team      Team              @relation(fields: [teamId], references: [id])
  teamId    String
  event     Event             @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  captain   Attendee          @relation(fields: [captainId], references: [id])
  captainId String
  answers   EventTeamAnswer[]

  @@unique([eventId, teamId])
}

model Event {
  id             String       @id @default(cuid())
  name           String
  owner          Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
  startDate      DateTime
  location       String
  price          Int
  teamCountLimit Int
  teams          EventTeam[]
  createdAt      DateTime     @default(now())
}

model Quiz {
  id          String         @id @default(cuid())
  name        String
  description String
  owner       Organization   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  questions   QuizQuestion[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// when choosing existing question, if ANY INFO ic changed (any word in question, any answer, any answer added) - question is "forked" (but with no reference to the original - yet)
// both question and all of the answers are added to its tables as new records
model Question {
  id             String             @id @default(cuid())
  text           String
  image          String?
  audio          String?
  questionType   QuestionType?      @relation(fields: [questionTypeId], references: [id])
  // TODO: set default question mode - single text question
  questionTypeId Int                @default(1)
  owner          Organization?      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String?
  isGlobal       Boolean            @default(false)
  isActive       Boolean            @default(true)
  categories     QuestionCategory[]
  answer         Answer[]
  quizQuestions  QuizQuestion[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Answer {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  answer     String
}

model QuestionType {
  id          Int        @id @default(autoincrement())
  name        String
  // mode rules are handled on the backend/frontend
  description String     @db.Text
  questions   Question[]

  @@map("QuestionMode")
}

model QuestionScoringMode {
  id          Int            @id @default(autoincrement())
  name        String
  description String         @db.Text
  questions   QuizQuestion[]
}

model QuestionCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  description String     @db.Text
  questions   Question[]
}

// question instance for a specific quiz
model QuizQuestion {
  id            String               @id @default(cuid())
  quiz          Quiz                 @relation(fields: [quizId], references: [id])
  quizId        String
  question      Question             @relation(fields: [questionId], references: [id])
  questionId    String
  ordinal       Int
  eventAnswers  EventTeamAnswer[]
  // we probably want to override original question mode (scoring)
  // ie. for modes such as "betting on answer" or "fastest correct answer"
  // maybe we have different mode tables - question mode on original question (single, photo, audio, multiple) & scoring mode on our instance
  scoringMode   QuestionScoringMode? @relation(fields: [scoringModeId], references: [id])
  scoringModeId Int


  @@unique([quizId, questionId])
  @@unique([quizId, ordinal])
}

model EventTeamAnswer {
  eventTeam   EventTeam         @relation(fields: [eventTeamId], references: [id])
  eventTeamId String
  question    QuizQuestion      @relation(fields: [questionId], references: [id])
  questionId  String
  // save all answers in string, parse on backend (CSV?)
  answer      String?
  status      EventAnswerStatus @default(UNANSWERED)
  points      Int               @default(0)
  createdAt   DateTime          @default(now())
  // track time of submission
  submittedAt DateTime
  // will be updated when the status was updated (we dont want that to track submit time)
  updatedAt   DateTime          @updatedAt

  @@unique([eventTeamId, questionId])
}

enum EventAnswerStatus {
  UNANSWERED
  CORRECT
  INCORRECT
}
